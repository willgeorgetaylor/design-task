export interface FakeOptions {
    length?: number;
}
declare type Return<T, O extends FakeOptions> = [O] extends [never] ? T : O['length'] extends number ? T[] : T;
export declare function fake<T, Options extends FakeOptions>(data: T[] | ((i: number) => T), options?: Options): Return<T, Options>;
export declare function randElement<T>(arr: T[]): T;
export interface RandomInRangeOptions {
    min?: number;
    max?: number;
    fraction?: number;
}
export declare function getRandomInRange({ min, max, fraction, }?: RandomInRangeOptions): number;
export {};
