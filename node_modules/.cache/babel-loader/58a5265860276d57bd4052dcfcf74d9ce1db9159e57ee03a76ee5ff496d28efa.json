{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nimport RelativeTimeFormatPolyfill from 'relative-time-format';\nimport Cache from './cache';\nimport chooseLocale from './locale';\nimport getStep from './steps/getStep';\nimport getStepDenominator from './steps/getStepDenominator';\nimport getTimeToNextUpdate from './steps/getTimeToNextUpdate';\nimport { addLocaleData, getLocaleData } from './LocaleDataStore';\nimport defaultStyle from './style/roundMinute';\nimport getStyleByName from './style/getStyleByName';\nimport { getRoundFunction } from './round'; // Valid time units.\n\nvar UNITS = ['now',\n// The rest are the same as in `Intl.RelativeTimeFormat`.\n'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'];\nvar TimeAgo = /*#__PURE__*/\nfunction () {\n  /**\r\n   * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n   * @param {boolean} [polyfill] — Pass `false` to use native `Intl.RelativeTimeFormat` and `Intl.PluralRules` instead of the polyfills.\r\n   */\n  function TimeAgo() {\n    var locales = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      polyfill = _ref.polyfill;\n    _classCallCheck(this, TimeAgo);\n\n    // Convert `locales` to an array.\n    if (typeof locales === 'string') {\n      locales = [locales];\n    } // Choose the most appropriate locale\n    // from the list of `locales` added by the user.\n    // For example, new TimeAgo(\"en-US\") -> \"en\".\n\n    this.locale = chooseLocale(locales.concat(TimeAgo.getDefaultLocale()), getLocaleData);\n    if (typeof Intl !== 'undefined') {\n      // Use `Intl.NumberFormat` for formatting numbers (when available).\n      if (Intl.NumberFormat) {\n        this.numberFormat = new Intl.NumberFormat(this.locale);\n      }\n    } // Some people have requested the ability to use native\n    // `Intl.RelativeTimeFormat` and `Intl.PluralRules`\n    // instead of the polyfills.\n    // https://github.com/catamphetamine/javascript-time-ago/issues/21\n\n    if (polyfill === false) {\n      this.IntlRelativeTimeFormat = Intl.RelativeTimeFormat;\n      this.IntlPluralRules = Intl.PluralRules;\n    } else {\n      this.IntlRelativeTimeFormat = RelativeTimeFormatPolyfill;\n      this.IntlPluralRules = RelativeTimeFormatPolyfill.PluralRules;\n    } // Cache `Intl.RelativeTimeFormat` instance.\n\n    this.relativeTimeFormatCache = new Cache(); // Cache `Intl.PluralRules` instance.\n\n    this.pluralRulesCache = new Cache();\n  }\n  /**\r\n   * Formats relative date/time.\r\n   *\r\n   * @param {number} [options.now] - Sets the current date timestamp.\r\n   *\r\n   * @param  {boolean} [options.future] — Tells how to format value `0`:\r\n   *         as \"future\" (`true`) or \"past\" (`false`).\r\n   *         Is `false` by default, but should have been `true` actually,\r\n   *         in order to correspond to `Intl.RelativeTimeFormat`\r\n   *         that uses `future` formatting for `0` unless `-0` is passed.\r\n   *\r\n   * @param {string} [options.round] — Rounding method. Overrides the style's one.\r\n   *\r\n   * @param {boolean} [options.getTimeToNextUpdate] — Pass `true` to return `[formattedDate, timeToNextUpdate]` instead of just `formattedDate`.\r\n   *\r\n   * @return {string} The formatted relative date/time. If no eligible `step` is found, then an empty string is returned.\r\n   */\n\n  _createClass(TimeAgo, [{\n    key: \"format\",\n    value: function format(input, style, options) {\n      if (!options) {\n        if (style && !isStyle(style)) {\n          options = style;\n          style = undefined;\n        } else {\n          options = {};\n        }\n      }\n      if (!style) {\n        style = defaultStyle;\n      }\n      if (typeof style === 'string') {\n        style = getStyleByName(style);\n      }\n      var timestamp = getTimestamp(input); // Get locale messages for this type of labels.\n      // \"flavour\" is a legacy name for \"labels\".\n\n      var _this$getLabels = this.getLabels(style.flavour || style.labels),\n        labels = _this$getLabels.labels,\n        labelsType = _this$getLabels.labelsType;\n      var now; // Can pass a custom `now`, e.g. for testing purposes.\n      //\n      // Legacy way was passing `now` in `style`.\n      // That way is deprecated.\n\n      if (style.now !== undefined) {\n        now = style.now;\n      } // The new way is passing `now` option to `.format()`.\n\n      if (now === undefined && options.now !== undefined) {\n        now = options.now;\n      }\n      if (now === undefined) {\n        now = Date.now();\n      } // how much time has passed (in seconds)\n\n      var secondsPassed = (now - timestamp) / 1000; // in seconds\n\n      var future = options.future || secondsPassed < 0;\n      var nowLabel = getNowLabel(labels, getLocaleData(this.locale).now, getLocaleData(this.locale).long, future); // `custom` – A function of `{ elapsed, time, date, now, locale }`.\n      //\n      // Looks like `custom` function is deprecated and will be removed\n      // in the next major version.\n      //\n      // If this function returns a value, then the `.format()` call will return that value.\n      // Otherwise the relative date/time is formatted as usual.\n      // This feature is currently not used anywhere and is here\n      // just for providing the ultimate customization point\n      // in case anyone would ever need that. Prefer using\n      // `steps[step].format(value, locale)` instead.\n      //\n\n      if (style.custom) {\n        var custom = style.custom({\n          now: now,\n          date: new Date(timestamp),\n          time: timestamp,\n          elapsed: secondsPassed,\n          locale: this.locale\n        });\n        if (custom !== undefined) {\n          // Won't return `timeToNextUpdate` here\n          // because `custom()` seems deprecated.\n          return custom;\n        }\n      } // Get the list of available time interval units.\n\n      var units = getTimeIntervalMeasurementUnits(\n      // Controlling `style.steps` through `style.units` seems to be deprecated:\n      // create a new custom `style` instead.\n      style.units, labels, nowLabel); // // If no available time unit is suitable, just output an empty string.\n      // if (units.length === 0) {\n      // \tconsole.error(`None of the \"${units.join(', ')}\" time units have been found in \"${labelsType}\" labels for \"${this.locale}\" locale.`)\n      // \treturn ''\n      // }\n\n      var round = options.round || style.round; // Choose the appropriate time measurement unit\n      // and get the corresponding rounded time amount.\n\n      var _getStep = getStep(\n        // \"gradation\" is a legacy name for \"steps\".\n        // For historical reasons, \"approximate\" steps are used by default.\n        // In the next major version, there'll be no default for `steps`.\n        style.gradation || style.steps || defaultStyle.steps, secondsPassed, {\n          now: now,\n          units: units,\n          round: round,\n          future: future,\n          getNextStep: true\n        }),\n        _getStep2 = _slicedToArray(_getStep, 3),\n        prevStep = _getStep2[0],\n        step = _getStep2[1],\n        nextStep = _getStep2[2];\n      var formattedDate = this.formatDateForStep(timestamp, step, secondsPassed, {\n        labels: labels,\n        labelsType: labelsType,\n        nowLabel: nowLabel,\n        now: now,\n        future: future,\n        round: round\n      }) || '';\n      if (options.getTimeToNextUpdate) {\n        var timeToNextUpdate = getTimeToNextUpdate(timestamp, step, {\n          nextStep: nextStep,\n          prevStep: prevStep,\n          now: now,\n          future: future,\n          round: round\n        });\n        return [formattedDate, timeToNextUpdate];\n      }\n      return formattedDate;\n    }\n  }, {\n    key: \"formatDateForStep\",\n    value: function formatDateForStep(timestamp, step, secondsPassed, _ref2) {\n      var _this = this;\n      var labels = _ref2.labels,\n        labelsType = _ref2.labelsType,\n        nowLabel = _ref2.nowLabel,\n        now = _ref2.now,\n        future = _ref2.future,\n        round = _ref2.round;\n\n      // If no step matches, then output an empty string.\n      if (!step) {\n        return;\n      }\n      if (step.format) {\n        return step.format(timestamp, this.locale, {\n          formatAs: function formatAs(unit, value) {\n            // Mimicks `Intl.RelativeTimeFormat.format()`.\n            return _this.formatValue(value, unit, {\n              labels: labels,\n              future: future\n            });\n          },\n          now: now,\n          future: future\n        });\n      } // \"unit\" is now called \"formatAs\".\n\n      var unit = step.unit || step.formatAs;\n      if (!unit) {\n        throw new Error(\"[javascript-time-ago] Each step must define either `formatAs` or `format()`. Step: \".concat(JSON.stringify(step)));\n      } // `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\n      // Therefore, threat \"now\" as a special case.\n\n      if (unit === 'now') {\n        return nowLabel;\n      } // Amount in units.\n\n      var amount = Math.abs(secondsPassed) / getStepDenominator(step); // Apply granularity to the time amount\n      // (and fallback to the previous step\n      //  if the first level of granularity\n      //  isn't met by this amount)\n      //\n      // `granularity` — (advanced) Time interval value \"granularity\".\n      // For example, it could be set to `5` for minutes to allow only 5-minute increments\n      // when formatting time intervals: `0 minutes`, `5 minutes`, `10 minutes`, etc.\n      // Perhaps this feature will be removed because there seem to be no use cases\n      // of it in the real world.\n      //\n\n      if (step.granularity) {\n        // Recalculate the amount of seconds passed based on granularity\n        amount = getRoundFunction(round)(amount / step.granularity) * step.granularity;\n      }\n      var valueForFormatting = -1 * Math.sign(secondsPassed) * getRoundFunction(round)(amount); // By default, this library formats a `0` in \"past\" mode,\n      // unless `future: true` option is passed.\n      // This is different to `relative-time-format`'s behavior\n      // which formats a `0` in \"future\" mode by default, unless it's a `-0`.\n      // So, convert `0` to `-0` if `future: true` option wasn't passed.\n      // `=== 0` matches both `0` and `-0`.\n\n      if (valueForFormatting === 0) {\n        if (future) {\n          valueForFormatting = 0;\n        } else {\n          valueForFormatting = -0;\n        }\n      }\n      switch (labelsType) {\n        case 'long':\n        case 'short':\n        case 'narrow':\n          // Format the amount using `Intl.RelativeTimeFormat`.\n          return this.getFormatter(labelsType).format(valueForFormatting, unit);\n        default:\n          // Format the amount.\n          // (mimicks `Intl.RelativeTimeFormat` behavior for other time label styles)\n          return this.formatValue(valueForFormatting, unit, {\n            labels: labels,\n            future: future\n          });\n      }\n    }\n    /**\r\n     * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n     * @param  {number} value\r\n     * @param  {string} unit\r\n     * @param  {object} options.labels — Relative time labels.\r\n     * @param  {boolean} [options.future] — Tells how to format value `0`: as \"future\" (`true`) or \"past\" (`false`). Is `false` by default, but should have been `true` actually.\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"formatValue\",\n    value: function formatValue(value, unit, _ref3) {\n      var labels = _ref3.labels,\n        future = _ref3.future;\n      return this.getFormattingRule(labels, unit, value, {\n        future: future\n      }).replace('{0}', this.formatNumber(Math.abs(value)));\n    }\n    /**\r\n     * Returns formatting rule for `value` in `units` (either in past or in future).\r\n     * @param {object} formattingRules — Relative time labels for different units.\r\n     * @param {string} unit - Time interval measurement unit.\r\n     * @param {number} value - Time interval value.\r\n     * @param  {boolean} [options.future] — Tells how to format value `0`: as \"future\" (`true`) or \"past\" (`false`). Is `false` by default.\r\n     * @return {string}\r\n     * @example\r\n     * // Returns \"{0} days ago\"\r\n     * getFormattingRule(en.long, \"day\", -2, 'en')\r\n     */\n  }, {\n    key: \"getFormattingRule\",\n    value: function getFormattingRule(formattingRules, unit, value, _ref4) {\n      var future = _ref4.future;\n      // Passing the language is required in order to\n      // be able to correctly classify the `value` as a number.\n      var locale = this.locale;\n      formattingRules = formattingRules[unit]; // Check for a special \"compacted\" rules case:\n      // if formatting rules are the same for \"past\" and \"future\",\n      // and also for all possible `value`s, then those rules are\n      // stored as a single string.\n\n      if (typeof formattingRules === 'string') {\n        return formattingRules;\n      } // Choose either \"past\" or \"future\" based on time `value` sign.\n      // If \"past\" is same as \"future\" then they're stored as \"other\".\n      // If there's only \"other\" then it's being collapsed.\n\n      var pastOrFuture = value === 0 ? future ? 'future' : 'past' : value < 0 ? 'past' : 'future';\n      var quantifierRules = formattingRules[pastOrFuture] || formattingRules; // Bundle size optimization technique.\n\n      if (typeof quantifierRules === 'string') {\n        return quantifierRules;\n      } // Quantify `value`.\n\n      var quantifier = this.getPluralRules().select(Math.abs(value)); // \"other\" rule is supposed to always be present.\n      // If only \"other\" rule is present then \"rules\" is not an object and is a string.\n\n      return quantifierRules[quantifier] || quantifierRules.other;\n    }\n    /**\r\n     * Formats a number into a string.\r\n     * Uses `Intl.NumberFormat` when available.\r\n     * @param  {number} number\r\n     * @return {string}\r\n     */\n  }, {\n    key: \"formatNumber\",\n    value: function formatNumber(number) {\n      return this.numberFormat ? this.numberFormat.format(number) : String(number);\n    }\n    /**\r\n     * Returns an `Intl.RelativeTimeFormat` for a given `labelsType`.\r\n     * @param {string} labelsType\r\n     * @return {object} `Intl.RelativeTimeFormat` instance\r\n     */\n  }, {\n    key: \"getFormatter\",\n    value: function getFormatter(labelsType) {\n      // `Intl.RelativeTimeFormat` instance creation is (hypothetically) assumed\n      // a lengthy operation so the instances are cached and reused.\n      return this.relativeTimeFormatCache.get(this.locale, labelsType) || this.relativeTimeFormatCache.put(this.locale, labelsType, new this.IntlRelativeTimeFormat(this.locale, {\n        style: labelsType\n      }));\n    }\n    /**\r\n     * Returns an `Intl.PluralRules` instance.\r\n     * @return {object} `Intl.PluralRules` instance\r\n     */\n  }, {\n    key: \"getPluralRules\",\n    value: function getPluralRules() {\n      // `Intl.PluralRules` instance creation is (hypothetically) assumed\n      // a lengthy operation so the instances are cached and reused.\n      return this.pluralRulesCache.get(this.locale) || this.pluralRulesCache.put(this.locale, new this.IntlPluralRules(this.locale));\n    }\n    /**\r\n     * Gets localized labels for this type of labels.\r\n     *\r\n     * @param {(string|string[])} labelsType - Relative date/time labels type.\r\n     *                                     If it's an array then all label types are tried\r\n     *                                     until a suitable one is found.\r\n     *\r\n     * @returns {Object} Returns an object of shape { labelsType, labels }\r\n     */\n  }, {\n    key: \"getLabels\",\n    value: function getLabels() {\n      var labelsType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      // Convert `labels` to an array.\n      if (typeof labelsType === 'string') {\n        labelsType = [labelsType];\n      } // Supports legacy \"tiny\" and \"mini-time\" label styles.\n\n      labelsType = labelsType.map(function (labelsType) {\n        switch (labelsType) {\n          case 'tiny':\n          case 'mini-time':\n            return 'mini';\n          default:\n            return labelsType;\n        }\n      }); // \"long\" labels type is the default one.\n      // (it's always present for all languages)\n\n      labelsType = labelsType.concat('long'); // Find a suitable labels type.\n\n      var localeData = getLocaleData(this.locale);\n      for (var _iterator = labelsType, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref5;\n        if (_isArray) {\n          if (_i2 >= _iterator.length) break;\n          _ref5 = _iterator[_i2++];\n        } else {\n          _i2 = _iterator.next();\n          if (_i2.done) break;\n          _ref5 = _i2.value;\n        }\n        var _labelsType = _ref5;\n        if (localeData[_labelsType]) {\n          return {\n            labelsType: _labelsType,\n            labels: localeData[_labelsType]\n          };\n        }\n      }\n    }\n  }]);\n  return TimeAgo;\n}();\n/**\r\n * Default locale global variable.\r\n */\n\nexport { TimeAgo as default };\nvar defaultLocale = 'en';\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\n\nTimeAgo.getDefaultLocale = function () {\n  return defaultLocale;\n};\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\n\nTimeAgo.setDefaultLocale = function (locale) {\n  return defaultLocale = locale;\n};\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\n\nTimeAgo.addDefaultLocale = function (localeData) {\n  if (defaultLocaleHasBeenSpecified) {\n    throw new Error('[javascript-time-ago] `TimeAgo.addDefaultLocale()` can only be called once. To add other locales, use `TimeAgo.addLocale()`.');\n  }\n  defaultLocaleHasBeenSpecified = true;\n  TimeAgo.setDefaultLocale(localeData.locale);\n  TimeAgo.addLocale(localeData);\n};\nvar defaultLocaleHasBeenSpecified;\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\n\nTimeAgo.addLocale = function (localeData) {\n  addLocaleData(localeData);\n  RelativeTimeFormatPolyfill.addLocale(localeData);\n};\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\n\nTimeAgo.locale = TimeAgo.addLocale;\n/**\r\n * Adds custom labels to locale data.\r\n * @param {string} locale\r\n * @param {string} name\r\n * @param {object} labels\r\n */\n\nTimeAgo.addLabels = function (locale, name, labels) {\n  var localeData = getLocaleData(locale);\n  if (!localeData) {\n    addLocaleData({\n      locale: locale\n    });\n    localeData = getLocaleData(locale); // throw new Error(`[javascript-time-ago] No data for locale \"${locale}\"`)\n  }\n  localeData[name] = labels;\n}; // Normalizes `.format()` `time` argument.\n\nfunction getTimestamp(input) {\n  if (input.constructor === Date || isMockedDate(input)) {\n    return input.getTime();\n  }\n  if (typeof input === 'number') {\n    return input;\n  } // For some weird reason istanbul doesn't see this `throw` covered.\n\n  /* istanbul ignore next */\n\n  throw new Error(\"Unsupported relative time formatter input: \".concat(_typeof(input), \", \").concat(input));\n} // During testing via some testing libraries `Date`s aren't actually `Date`s.\n// https://github.com/catamphetamine/javascript-time-ago/issues/22\n\nfunction isMockedDate(object) {\n  return _typeof(object) === 'object' && typeof object.getTime === 'function';\n} // Get available time interval measurement units.\n\nfunction getTimeIntervalMeasurementUnits(allowedUnits, labels, nowLabel) {\n  // Get all time interval measurement units that're available\n  // in locale data for a given time labels style.\n  var units = Object.keys(labels); // `now` unit is handled separately and is shipped in its own `now.json` file.\n  // `now.json` isn't present for all locales, so it could be substituted with\n  // \".second.current\".\n  // Add `now` unit if it's available in locale data.\n\n  if (nowLabel) {\n    units.push('now');\n  } // If only a specific set of available time measurement units can be used\n  // then only those units are allowed (if they're present in locale data).\n\n  if (allowedUnits) {\n    units = allowedUnits.filter(function (unit) {\n      return unit === 'now' || units.indexOf(unit) >= 0;\n    });\n  }\n  return units;\n}\nfunction getNowLabel(labels, nowLabels, longLabels, future) {\n  var nowLabel = labels.now || nowLabels && nowLabels.now; // Specific \"now\" message form extended locale data (if present).\n\n  if (nowLabel) {\n    // Bundle size optimization technique.\n    if (typeof nowLabel === 'string') {\n      return nowLabel;\n    } // Not handling `value === 0` as `localeData.now.current` here\n    // because it wouldn't make sense: \"now\" is a moment,\n    // so one can't possibly differentiate between a\n    // \"previous\" moment, a \"current\" moment and a \"next moment\".\n    // It can only be differentiated between \"past\" and \"future\".\n\n    if (future) {\n      return nowLabel.future;\n    } else {\n      return nowLabel.past;\n    }\n  } // Use \".second.current\" as \"now\" message.\n\n  if (longLabels && longLabels.second && longLabels.second.current) {\n    return longLabels.second.current;\n  }\n}\nvar OBJECT_CONSTRUCTOR = {}.constructor;\nfunction isObject(object) {\n  return _typeof(object) !== undefined && object !== null && object.constructor === OBJECT_CONSTRUCTOR;\n}\nfunction isStyle(variable) {\n  return typeof variable === 'string' || isStyleObject(variable);\n}\nexport function isStyleObject(object) {\n  return isObject(object) && (Array.isArray(object.steps) ||\n  // `gradation` property is deprecated: it has been renamed to `steps`.\n  Array.isArray(object.gradation) ||\n  // `flavour` property is deprecated: it has been renamed to `labels`.\n  Array.isArray(object.flavour) || typeof object.flavour === 'string' || Array.isArray(object.labels) || typeof object.labels === 'string' ||\n  // `units` property is deprecated.\n  Array.isArray(object.units) ||\n  // `custom` property is deprecated.\n  typeof object.custom === 'function');\n}","map":{"version":3,"names":["RelativeTimeFormatPolyfill","Cache","chooseLocale","getStep","getStepDenominator","getTimeToNextUpdate","addLocaleData","getLocaleData","defaultStyle","getStyleByName","getRoundFunction","UNITS","TimeAgo","locales","arguments","length","undefined","_ref","polyfill","_classCallCheck","locale","concat","getDefaultLocale","Intl","NumberFormat","numberFormat","IntlRelativeTimeFormat","RelativeTimeFormat","IntlPluralRules","PluralRules","relativeTimeFormatCache","pluralRulesCache","input","style","options","isStyle","timestamp","getTimestamp","_this$getLabels","getLabels","flavour","labels","labelsType","now","Date","secondsPassed","future","nowLabel","getNowLabel","long","custom","date","time","elapsed","units","getTimeIntervalMeasurementUnits","round","_getStep","gradation","steps","getNextStep","_getStep2","_slicedToArray","prevStep","step","nextStep","formattedDate","formatDateForStep","timeToNextUpdate","_this","_ref2","format","formatAs","unit","value","formatValue","Error","JSON","stringify","amount","Math","abs","granularity","valueForFormatting","sign","getFormatter","_ref3","getFormattingRule","replace","formatNumber","formattingRules","_ref4","pastOrFuture","quantifierRules","quantifier","getPluralRules","select","other","number","String","get","put","map","localeData","_iterator","_isArray","Array","isArray","_i2","Symbol","iterator","_ref5","next","done","_labelsType","defaultLocale","setDefaultLocale","addDefaultLocale","defaultLocaleHasBeenSpecified","addLocale","addLabels","name","constructor","isMockedDate","getTime","_typeof","object","allowedUnits","Object","keys","push","filter","indexOf","nowLabels","longLabels","past","second","current","OBJECT_CONSTRUCTOR","isObject","variable","isStyleObject"],"sources":["/Users/will/Desktop/design-task/node_modules/.pnpm/javascript-time-ago@2.3.7/node_modules/javascript-time-ago/source/TimeAgo.js"],"sourcesContent":["import RelativeTimeFormatPolyfill from 'relative-time-format'\r\n\r\nimport Cache from './cache'\r\nimport chooseLocale from './locale'\r\nimport getStep from './steps/getStep'\r\nimport getStepDenominator from './steps/getStepDenominator'\r\nimport getTimeToNextUpdate from './steps/getTimeToNextUpdate'\r\n\r\nimport {\r\n\taddLocaleData,\r\n\tgetLocaleData\r\n} from './LocaleDataStore'\r\n\r\nimport defaultStyle from './style/roundMinute'\r\nimport getStyleByName from './style/getStyleByName'\r\n\r\nimport { getRoundFunction } from './round'\r\n\r\n// Valid time units.\r\nconst UNITS = [\r\n\t'now',\r\n\t// The rest are the same as in `Intl.RelativeTimeFormat`.\r\n\t'second',\r\n\t'minute',\r\n\t'hour',\r\n\t'day',\r\n\t'week',\r\n\t'month',\r\n\t'quarter',\r\n\t'year'\r\n]\r\n\r\nexport default class TimeAgo {\r\n\t/**\r\n\t * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n\t * @param {boolean} [polyfill] — Pass `false` to use native `Intl.RelativeTimeFormat` and `Intl.PluralRules` instead of the polyfills.\r\n\t */\r\n\tconstructor(locales = [], { polyfill } = {}) {\r\n\t\t// Convert `locales` to an array.\r\n\t\tif (typeof locales === 'string') {\r\n\t\t\tlocales = [locales]\r\n\t\t}\r\n\r\n\t\t// Choose the most appropriate locale\r\n\t\t// from the list of `locales` added by the user.\r\n\t\t// For example, new TimeAgo(\"en-US\") -> \"en\".\r\n\t\tthis.locale = chooseLocale(\r\n\t\t\tlocales.concat(TimeAgo.getDefaultLocale()),\r\n\t\t\tgetLocaleData\r\n\t\t)\r\n\r\n\t\tif (typeof Intl !== 'undefined') {\r\n\t\t\t// Use `Intl.NumberFormat` for formatting numbers (when available).\r\n\t\t\tif (Intl.NumberFormat) {\r\n\t\t\t\tthis.numberFormat = new Intl.NumberFormat(this.locale)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Some people have requested the ability to use native\r\n\t\t// `Intl.RelativeTimeFormat` and `Intl.PluralRules`\r\n\t\t// instead of the polyfills.\r\n\t\t// https://github.com/catamphetamine/javascript-time-ago/issues/21\r\n\t\tif (polyfill === false) {\r\n\t\t\tthis.IntlRelativeTimeFormat = Intl.RelativeTimeFormat\r\n\t\t\tthis.IntlPluralRules = Intl.PluralRules\r\n\t\t} else {\r\n\t\t\tthis.IntlRelativeTimeFormat = RelativeTimeFormatPolyfill\r\n\t\t\tthis.IntlPluralRules = RelativeTimeFormatPolyfill.PluralRules\r\n\t\t}\r\n\r\n\t\t// Cache `Intl.RelativeTimeFormat` instance.\r\n\t\tthis.relativeTimeFormatCache = new Cache()\r\n\r\n\t\t// Cache `Intl.PluralRules` instance.\r\n\t\tthis.pluralRulesCache = new Cache()\r\n\t}\r\n\r\n\t/**\r\n\t * Formats relative date/time.\r\n\t *\r\n\t * @param {number} [options.now] - Sets the current date timestamp.\r\n\t *\r\n\t * @param  {boolean} [options.future] — Tells how to format value `0`:\r\n\t *         as \"future\" (`true`) or \"past\" (`false`).\r\n\t *         Is `false` by default, but should have been `true` actually,\r\n\t *         in order to correspond to `Intl.RelativeTimeFormat`\r\n\t *         that uses `future` formatting for `0` unless `-0` is passed.\r\n\t *\r\n\t * @param {string} [options.round] — Rounding method. Overrides the style's one.\r\n\t *\r\n\t * @param {boolean} [options.getTimeToNextUpdate] — Pass `true` to return `[formattedDate, timeToNextUpdate]` instead of just `formattedDate`.\r\n\t *\r\n\t * @return {string} The formatted relative date/time. If no eligible `step` is found, then an empty string is returned.\r\n\t */\r\n\tformat(input, style, options) {\r\n\t\tif (!options) {\r\n\t\t\tif (style && !isStyle(style)) {\r\n\t\t\t\toptions = style\r\n\t\t\t\tstyle = undefined\r\n\t\t\t} else {\r\n\t\t\t\toptions = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!style) {\r\n\t\t\tstyle = defaultStyle\r\n\t\t}\r\n\r\n\t\tif (typeof style === 'string') {\r\n\t\t\tstyle = getStyleByName(style)\r\n\t\t}\r\n\r\n\t\tconst timestamp = getTimestamp(input)\r\n\r\n\t\t// Get locale messages for this type of labels.\r\n\t\t// \"flavour\" is a legacy name for \"labels\".\r\n\t\tconst { labels, labelsType } = this.getLabels(style.flavour || style.labels)\r\n\r\n\t\tlet now\r\n\t\t// Can pass a custom `now`, e.g. for testing purposes.\r\n\t\t//\r\n\t\t// Legacy way was passing `now` in `style`.\r\n\t\t// That way is deprecated.\r\n\t\tif (style.now !== undefined) {\r\n\t\t\tnow = style.now\r\n\t\t}\r\n\t\t// The new way is passing `now` option to `.format()`.\r\n\t\tif (now === undefined && options.now !== undefined) {\r\n\t\t\tnow = options.now\r\n\t\t}\r\n\t\tif (now === undefined) {\r\n\t\t\tnow = Date.now()\r\n\t\t}\r\n\r\n\t\t// how much time has passed (in seconds)\r\n\t\tconst secondsPassed = (now - timestamp) / 1000 // in seconds\r\n\r\n\t\tconst future = options.future || secondsPassed < 0\r\n\r\n\t\tconst nowLabel = getNowLabel(\r\n\t\t\tlabels,\r\n\t\t\tgetLocaleData(this.locale).now,\r\n\t\t\tgetLocaleData(this.locale).long,\r\n\t\t\tfuture\r\n\t\t)\r\n\r\n\t\t// `custom` – A function of `{ elapsed, time, date, now, locale }`.\r\n\t\t//\r\n\t\t// Looks like `custom` function is deprecated and will be removed\r\n\t\t// in the next major version.\r\n\t\t//\r\n\t\t// If this function returns a value, then the `.format()` call will return that value.\r\n\t\t// Otherwise the relative date/time is formatted as usual.\r\n\t\t// This feature is currently not used anywhere and is here\r\n\t\t// just for providing the ultimate customization point\r\n\t\t// in case anyone would ever need that. Prefer using\r\n\t\t// `steps[step].format(value, locale)` instead.\r\n\t\t//\r\n\t\tif (style.custom) {\r\n\t\t\tconst custom = style.custom({\r\n\t\t\t\tnow,\r\n\t\t\t\tdate: new Date(timestamp),\r\n\t\t\t\ttime: timestamp,\r\n\t\t\t\telapsed: secondsPassed,\r\n\t\t\t\tlocale: this.locale\r\n\t\t\t})\r\n\t\t\tif (custom !== undefined) {\r\n\t\t\t\t// Won't return `timeToNextUpdate` here\r\n\t\t\t\t// because `custom()` seems deprecated.\r\n\t\t\t\treturn custom\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Get the list of available time interval units.\r\n\t\tconst units = getTimeIntervalMeasurementUnits(\r\n\t\t\t// Controlling `style.steps` through `style.units` seems to be deprecated:\r\n\t\t\t// create a new custom `style` instead.\r\n\t\t\tstyle.units,\r\n\t\t\tlabels,\r\n\t\t\tnowLabel\r\n\t\t)\r\n\r\n\t\t// // If no available time unit is suitable, just output an empty string.\r\n\t\t// if (units.length === 0) {\r\n\t\t// \tconsole.error(`None of the \"${units.join(', ')}\" time units have been found in \"${labelsType}\" labels for \"${this.locale}\" locale.`)\r\n\t\t// \treturn ''\r\n\t\t// }\r\n\r\n\t\tconst round = options.round || style.round\r\n\r\n\t\t// Choose the appropriate time measurement unit\r\n\t\t// and get the corresponding rounded time amount.\r\n\t\tconst [prevStep, step, nextStep] = getStep(\r\n\t\t\t// \"gradation\" is a legacy name for \"steps\".\r\n\t\t\t// For historical reasons, \"approximate\" steps are used by default.\r\n\t\t\t// In the next major version, there'll be no default for `steps`.\r\n\t\t\tstyle.gradation || style.steps || defaultStyle.steps,\r\n\t\t\tsecondsPassed,\r\n\t\t\t{ now, units, round, future, getNextStep: true }\r\n\t\t)\r\n\r\n\t\tconst formattedDate = this.formatDateForStep(timestamp, step, secondsPassed, {\r\n\t\t\tlabels,\r\n\t\t\tlabelsType,\r\n\t\t\tnowLabel,\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround\r\n\t\t}) || ''\r\n\r\n\t\tif (options.getTimeToNextUpdate) {\r\n\t\t\tconst timeToNextUpdate = getTimeToNextUpdate(timestamp, step, {\r\n\t\t\t\tnextStep,\r\n\t\t\t\tprevStep,\r\n\t\t\t\tnow,\r\n\t\t\t\tfuture,\r\n\t\t\t\tround\r\n\t\t\t})\r\n\t\t\treturn [formattedDate, timeToNextUpdate]\r\n\t\t}\r\n\r\n\t\treturn formattedDate\r\n\t}\r\n\r\n\tformatDateForStep(timestamp, step, secondsPassed, {\r\n\t\tlabels,\r\n\t\tlabelsType,\r\n\t\tnowLabel,\r\n\t\tnow,\r\n\t\tfuture,\r\n\t\tround\r\n\t}) {\r\n\t\t// If no step matches, then output an empty string.\r\n\t\tif (!step) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (step.format) {\r\n\t\t\treturn step.format(timestamp, this.locale, {\r\n\t\t\t\tformatAs: (unit, value) => {\r\n\t\t\t\t\t// Mimicks `Intl.RelativeTimeFormat.format()`.\r\n\t\t\t\t\treturn this.formatValue(value, unit, {\r\n\t\t\t\t\t\tlabels,\r\n\t\t\t\t\t\tfuture\r\n\t\t\t\t\t})\r\n\t\t\t\t},\r\n\t\t\t\tnow,\r\n\t\t\t\tfuture\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// \"unit\" is now called \"formatAs\".\r\n\t\tconst unit = step.unit || step.formatAs\r\n\r\n\t\tif (!unit) {\r\n\t\t\tthrow new Error(`[javascript-time-ago] Each step must define either \\`formatAs\\` or \\`format()\\`. Step: ${JSON.stringify(step)}`)\r\n\t\t}\r\n\r\n\t\t// `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\r\n\t\t// Therefore, threat \"now\" as a special case.\r\n\t\tif (unit === 'now') {\r\n\t\t\treturn nowLabel\r\n\t\t}\r\n\r\n\t\t// Amount in units.\r\n\t\tlet amount = Math.abs(secondsPassed) / getStepDenominator(step)\r\n\r\n\t\t// Apply granularity to the time amount\r\n\t\t// (and fallback to the previous step\r\n\t\t//  if the first level of granularity\r\n\t\t//  isn't met by this amount)\r\n\t\t//\r\n\t\t// `granularity` — (advanced) Time interval value \"granularity\".\r\n\t\t// For example, it could be set to `5` for minutes to allow only 5-minute increments\r\n\t\t// when formatting time intervals: `0 minutes`, `5 minutes`, `10 minutes`, etc.\r\n\t\t// Perhaps this feature will be removed because there seem to be no use cases\r\n\t\t// of it in the real world.\r\n\t\t//\r\n\t\tif (step.granularity) {\r\n\t\t\t// Recalculate the amount of seconds passed based on granularity\r\n\t\t\tamount = getRoundFunction(round)(amount / step.granularity) * step.granularity\r\n\t\t}\r\n\r\n\t\tlet valueForFormatting = -1 * Math.sign(secondsPassed) * getRoundFunction(round)(amount)\r\n\r\n\t\t// By default, this library formats a `0` in \"past\" mode,\r\n\t\t// unless `future: true` option is passed.\r\n\t\t// This is different to `relative-time-format`'s behavior\r\n\t\t// which formats a `0` in \"future\" mode by default, unless it's a `-0`.\r\n\t\t// So, convert `0` to `-0` if `future: true` option wasn't passed.\r\n\t\t// `=== 0` matches both `0` and `-0`.\r\n\t\tif (valueForFormatting === 0) {\r\n\t\t\tif (future) {\r\n\t\t\t\tvalueForFormatting = 0\r\n\t\t\t} else {\r\n\t\t\t\tvalueForFormatting = -0\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswitch (labelsType) {\r\n\t\t\tcase 'long':\r\n\t\t\tcase 'short':\r\n\t\t\tcase 'narrow':\r\n\t\t\t\t// Format the amount using `Intl.RelativeTimeFormat`.\r\n\t\t\t\treturn this.getFormatter(labelsType).format(valueForFormatting, unit)\r\n\t\t\tdefault:\r\n\t\t\t\t// Format the amount.\r\n\t\t\t\t// (mimicks `Intl.RelativeTimeFormat` behavior for other time label styles)\r\n\t\t\t\treturn this.formatValue(valueForFormatting, unit, {\r\n\t\t\t\t\tlabels,\r\n\t\t\t\t\tfuture\r\n\t\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n\t * @param  {number} value\r\n\t * @param  {string} unit\r\n\t * @param  {object} options.labels — Relative time labels.\r\n\t * @param  {boolean} [options.future] — Tells how to format value `0`: as \"future\" (`true`) or \"past\" (`false`). Is `false` by default, but should have been `true` actually.\r\n\t * @return {string}\r\n\t */\r\n\tformatValue(value, unit, { labels, future }) {\r\n\t\treturn this.getFormattingRule(labels, unit, value, { future })\r\n\t\t\t.replace('{0}', this.formatNumber(Math.abs(value)))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns formatting rule for `value` in `units` (either in past or in future).\r\n\t * @param {object} formattingRules — Relative time labels for different units.\r\n\t * @param {string} unit - Time interval measurement unit.\r\n\t * @param {number} value - Time interval value.\r\n\t * @param  {boolean} [options.future] — Tells how to format value `0`: as \"future\" (`true`) or \"past\" (`false`). Is `false` by default.\r\n\t * @return {string}\r\n\t * @example\r\n\t * // Returns \"{0} days ago\"\r\n\t * getFormattingRule(en.long, \"day\", -2, 'en')\r\n\t */\r\n\tgetFormattingRule(formattingRules, unit, value, { future }) {\r\n\t\t// Passing the language is required in order to\r\n\t\t// be able to correctly classify the `value` as a number.\r\n\t\tconst locale = this.locale\r\n\t\tformattingRules = formattingRules[unit]\r\n\t\t// Check for a special \"compacted\" rules case:\r\n\t\t// if formatting rules are the same for \"past\" and \"future\",\r\n\t\t// and also for all possible `value`s, then those rules are\r\n\t\t// stored as a single string.\r\n\t\tif (typeof formattingRules === 'string') {\r\n\t\t\treturn formattingRules\r\n\t\t}\r\n\t\t// Choose either \"past\" or \"future\" based on time `value` sign.\r\n\t\t// If \"past\" is same as \"future\" then they're stored as \"other\".\r\n\t\t// If there's only \"other\" then it's being collapsed.\r\n\t\tconst pastOrFuture = value === 0 ? (future ? 'future' : 'past') : (value < 0 ? 'past' : 'future')\r\n\t\tconst quantifierRules = formattingRules[pastOrFuture] || formattingRules\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof quantifierRules === 'string') {\r\n\t\t\treturn quantifierRules\r\n\t\t}\r\n\t\t// Quantify `value`.\r\n\t\tconst quantifier = this.getPluralRules().select(Math.abs(value))\r\n\t\t// \"other\" rule is supposed to always be present.\r\n\t\t// If only \"other\" rule is present then \"rules\" is not an object and is a string.\r\n\t\treturn quantifierRules[quantifier] || quantifierRules.other\r\n\t}\r\n\r\n\t/**\r\n\t * Formats a number into a string.\r\n\t * Uses `Intl.NumberFormat` when available.\r\n\t * @param  {number} number\r\n\t * @return {string}\r\n\t */\r\n\tformatNumber(number) {\r\n\t\treturn this.numberFormat ? this.numberFormat.format(number) : String(number)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `Intl.RelativeTimeFormat` for a given `labelsType`.\r\n\t * @param {string} labelsType\r\n\t * @return {object} `Intl.RelativeTimeFormat` instance\r\n\t */\r\n\tgetFormatter(labelsType) {\r\n\t\t// `Intl.RelativeTimeFormat` instance creation is (hypothetically) assumed\r\n\t\t// a lengthy operation so the instances are cached and reused.\r\n\t\treturn this.relativeTimeFormatCache.get(this.locale, labelsType) ||\r\n\t\t\tthis.relativeTimeFormatCache.put(this.locale, labelsType, new this.IntlRelativeTimeFormat(this.locale, { style: labelsType }))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `Intl.PluralRules` instance.\r\n\t * @return {object} `Intl.PluralRules` instance\r\n\t */\r\n\tgetPluralRules() {\r\n\t\t// `Intl.PluralRules` instance creation is (hypothetically) assumed\r\n\t\t// a lengthy operation so the instances are cached and reused.\r\n\t\treturn this.pluralRulesCache.get(this.locale) ||\r\n\t\t\tthis.pluralRulesCache.put(this.locale, new this.IntlPluralRules(this.locale))\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets localized labels for this type of labels.\r\n\t *\r\n\t * @param {(string|string[])} labelsType - Relative date/time labels type.\r\n\t *                                     If it's an array then all label types are tried\r\n\t *                                     until a suitable one is found.\r\n\t *\r\n\t * @returns {Object} Returns an object of shape { labelsType, labels }\r\n\t */\r\n\tgetLabels(labelsType = []) {\r\n\t\t// Convert `labels` to an array.\r\n\t\tif (typeof labelsType === 'string') {\r\n\t\t\tlabelsType = [labelsType]\r\n\t\t}\r\n\r\n\t\t// Supports legacy \"tiny\" and \"mini-time\" label styles.\r\n\t\tlabelsType = labelsType.map((labelsType) => {\r\n\t\t\tswitch (labelsType) {\r\n\t\t\t\tcase 'tiny':\r\n\t\t\t\tcase 'mini-time':\r\n\t\t\t\t\treturn 'mini'\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn labelsType\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t// \"long\" labels type is the default one.\r\n\t\t// (it's always present for all languages)\r\n\t\tlabelsType = labelsType.concat('long')\r\n\r\n\t\t// Find a suitable labels type.\r\n\t\tconst localeData = getLocaleData(this.locale)\r\n\t\tfor (const _labelsType of labelsType) {\r\n\t\t\tif (localeData[_labelsType]) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tlabelsType: _labelsType,\r\n\t\t\t\t\tlabels: localeData[_labelsType]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Default locale global variable.\r\n */\r\nlet defaultLocale = 'en'\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nTimeAgo.getDefaultLocale = () => defaultLocale\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nTimeAgo.setDefaultLocale = (locale) => defaultLocale = locale\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nTimeAgo.addDefaultLocale = function(localeData) {\r\n\tif (defaultLocaleHasBeenSpecified) {\r\n\t\tthrow new Error('[javascript-time-ago] `TimeAgo.addDefaultLocale()` can only be called once. To add other locales, use `TimeAgo.addLocale()`.')\r\n\t}\r\n\tdefaultLocaleHasBeenSpecified = true\r\n\tTimeAgo.setDefaultLocale(localeData.locale)\r\n\tTimeAgo.addLocale(localeData)\r\n}\r\n\r\nlet defaultLocaleHasBeenSpecified\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nTimeAgo.addLocale = function(localeData) {\r\n\taddLocaleData(localeData)\r\n\tRelativeTimeFormatPolyfill.addLocale(localeData)\r\n}\r\n\r\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\r\nTimeAgo.locale = TimeAgo.addLocale\r\n\r\n/**\r\n * Adds custom labels to locale data.\r\n * @param {string} locale\r\n * @param {string} name\r\n * @param {object} labels\r\n */\r\nTimeAgo.addLabels = (locale, name, labels) => {\r\n\tlet localeData = getLocaleData(locale)\r\n\tif (!localeData) {\r\n\t\taddLocaleData({\r\n\t\t\tlocale\r\n\t\t})\r\n\t\tlocaleData = getLocaleData(locale)\r\n\t\t// throw new Error(`[javascript-time-ago] No data for locale \"${locale}\"`)\r\n\t}\r\n\tlocaleData[name] = labels\r\n}\r\n\r\n// Normalizes `.format()` `time` argument.\r\nfunction getTimestamp(input) {\r\n\tif (input.constructor === Date || isMockedDate(input)) {\r\n\t\treturn input.getTime()\r\n\t}\r\n\r\n\tif (typeof input === 'number') {\r\n\t\treturn input\r\n\t}\r\n\r\n\t// For some weird reason istanbul doesn't see this `throw` covered.\r\n\t/* istanbul ignore next */\r\n\tthrow new Error(`Unsupported relative time formatter input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// During testing via some testing libraries `Date`s aren't actually `Date`s.\r\n// https://github.com/catamphetamine/javascript-time-ago/issues/22\r\nfunction isMockedDate(object) {\r\n\treturn typeof object === 'object' && typeof object.getTime === 'function'\r\n}\r\n\r\n// Get available time interval measurement units.\r\nfunction getTimeIntervalMeasurementUnits(allowedUnits, labels, nowLabel) {\r\n\t// Get all time interval measurement units that're available\r\n\t// in locale data for a given time labels style.\r\n\tlet units = Object.keys(labels)\r\n\r\n\t// `now` unit is handled separately and is shipped in its own `now.json` file.\r\n\t// `now.json` isn't present for all locales, so it could be substituted with\r\n\t// \".second.current\".\r\n\t// Add `now` unit if it's available in locale data.\r\n\tif (nowLabel) {\r\n\t\tunits.push('now')\r\n\t}\r\n\r\n\t// If only a specific set of available time measurement units can be used\r\n\t// then only those units are allowed (if they're present in locale data).\r\n\tif (allowedUnits) {\r\n\t\tunits = allowedUnits.filter(unit => unit === 'now' || units.indexOf(unit) >= 0)\r\n\t}\r\n\r\n\treturn units\r\n}\r\n\r\nfunction getNowLabel(labels, nowLabels, longLabels, future) {\r\n\tconst nowLabel = labels.now || (nowLabels && nowLabels.now)\r\n\t// Specific \"now\" message form extended locale data (if present).\r\n\tif (nowLabel) {\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof nowLabel === 'string') {\r\n\t\t\treturn nowLabel\r\n\t\t}\r\n\t\t// Not handling `value === 0` as `localeData.now.current` here\r\n\t\t// because it wouldn't make sense: \"now\" is a moment,\r\n\t\t// so one can't possibly differentiate between a\r\n\t\t// \"previous\" moment, a \"current\" moment and a \"next moment\".\r\n\t\t// It can only be differentiated between \"past\" and \"future\".\r\n\t\tif (future) {\r\n\t\t\treturn nowLabel.future\r\n\t\t} else {\r\n\t\t\treturn nowLabel.past\r\n\t\t}\r\n\t}\r\n\t// Use \".second.current\" as \"now\" message.\r\n\tif (longLabels && longLabels.second && longLabels.second.current) {\r\n\t\treturn longLabels.second.current\r\n\t}\r\n}\r\n\r\nconst OBJECT_CONSTRUCTOR = {}.constructor\r\nfunction isObject(object) {\r\n\treturn typeof object !== undefined && object !== null && object.constructor === OBJECT_CONSTRUCTOR\r\n}\r\n\r\nfunction isStyle(variable) {\r\n\treturn typeof variable === 'string' || isStyleObject(variable)\r\n}\r\n\r\nexport function isStyleObject(object) {\r\n\treturn isObject(object) && (\r\n\t\tArray.isArray(object.steps) ||\r\n\t\t// `gradation` property is deprecated: it has been renamed to `steps`.\r\n\t\tArray.isArray(object.gradation) ||\r\n\t\t// `flavour` property is deprecated: it has been renamed to `labels`.\r\n\t\tArray.isArray(object.flavour) ||\r\n\t\ttypeof object.flavour === 'string' ||\r\n\t\tArray.isArray(object.labels) ||\r\n\t\ttypeof object.labels === 'string' ||\r\n\t\t// `units` property is deprecated.\r\n\t\tArray.isArray(object.units) ||\r\n\t\t// `custom` property is deprecated.\r\n\t\ttypeof object.custom === 'function'\r\n\t)\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}