{"ast":null,"code":"import { DateTime } from \"luxon\";\n\n/**\n * Formats the time span between two dates as a human-readable string.\n * Only returns hours or days, not weeks or longer periods.\n *\n * @param startIso - ISO string of the start time\n * @param endIso - ISO string of the end time (optional, defaults to now)\n * @param includeSuffix - Whether to include \"ago\" suffix (default: false)\n * @returns Formatted time span string like \"2 hours\" or \"3 days ago\"\n */\nexport function formatTimeSpent(startIso, endIso) {\n  let includeSuffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const start = DateTime.fromISO(startIso);\n  const end = endIso ? DateTime.fromISO(endIso) : DateTime.now();\n  const diffInHours = end.diff(start, \"hours\").hours;\n  const diffInDays = end.diff(start, \"days\").days;\n  let timeString;\n  if (diffInHours < 24) {\n    const hours = Math.round(diffInHours);\n    timeString = `${hours} hour${hours !== 1 ? \"s\" : \"\"}`;\n  } else {\n    const days = Math.round(diffInDays);\n    timeString = `${days} day${days !== 1 ? \"s\" : \"\"}`;\n  }\n  return includeSuffix ? `${timeString} ago` : timeString;\n}","map":{"version":3,"names":["DateTime","formatTimeSpent","startIso","endIso","includeSuffix","arguments","length","undefined","start","fromISO","end","now","diffInHours","diff","hours","diffInDays","days","timeString","Math","round"],"sources":["/Users/will/Desktop/design-task/src/utils/timeUtils.ts"],"sourcesContent":["import { DateTime } from \"luxon\";\n\n/**\n * Formats the time span between two dates as a human-readable string.\n * Only returns hours or days, not weeks or longer periods.\n *\n * @param startIso - ISO string of the start time\n * @param endIso - ISO string of the end time (optional, defaults to now)\n * @param includeSuffix - Whether to include \"ago\" suffix (default: false)\n * @returns Formatted time span string like \"2 hours\" or \"3 days ago\"\n */\nexport function formatTimeSpent(\n  startIso: string,\n  endIso?: string,\n  includeSuffix: boolean = false\n): string {\n  const start = DateTime.fromISO(startIso);\n  const end = endIso ? DateTime.fromISO(endIso) : DateTime.now();\n\n  const diffInHours = end.diff(start, \"hours\").hours;\n  const diffInDays = end.diff(start, \"days\").days;\n\n  let timeString: string;\n\n  if (diffInHours < 24) {\n    const hours = Math.round(diffInHours);\n    timeString = `${hours} hour${hours !== 1 ? \"s\" : \"\"}`;\n  } else {\n    const days = Math.round(diffInDays);\n    timeString = `${days} day${days !== 1 ? \"s\" : \"\"}`;\n  }\n\n  return includeSuffix ? `${timeString} ago` : timeString;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAC7BC,QAAgB,EAChBC,MAAe,EAEP;EAAA,IADRC,aAAsB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAE9B,MAAMG,KAAK,GAAGR,QAAQ,CAACS,OAAO,CAACP,QAAQ,CAAC;EACxC,MAAMQ,GAAG,GAAGP,MAAM,GAAGH,QAAQ,CAACS,OAAO,CAACN,MAAM,CAAC,GAAGH,QAAQ,CAACW,GAAG,CAAC,CAAC;EAE9D,MAAMC,WAAW,GAAGF,GAAG,CAACG,IAAI,CAACL,KAAK,EAAE,OAAO,CAAC,CAACM,KAAK;EAClD,MAAMC,UAAU,GAAGL,GAAG,CAACG,IAAI,CAACL,KAAK,EAAE,MAAM,CAAC,CAACQ,IAAI;EAE/C,IAAIC,UAAkB;EAEtB,IAAIL,WAAW,GAAG,EAAE,EAAE;IACpB,MAAME,KAAK,GAAGI,IAAI,CAACC,KAAK,CAACP,WAAW,CAAC;IACrCK,UAAU,GAAG,GAAGH,KAAK,QAAQA,KAAK,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE;EACvD,CAAC,MAAM;IACL,MAAME,IAAI,GAAGE,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC;IACnCE,UAAU,GAAG,GAAGD,IAAI,OAAOA,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE;EACpD;EAEA,OAAOZ,aAAa,GAAG,GAAGa,UAAU,MAAM,GAAGA,UAAU;AACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}