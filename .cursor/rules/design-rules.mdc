---
alwaysApply: true
---

# Design Rules

## Accessibility

Our interfaces must be accessible to a wide variety of audiences. This means:

- We have AA+ or better contrast between chrome and content. While low contrast can sometimes be visually pleasing, it creates usability issues with users who do not have perfect vision.
- We prefer using the correct semantic HTML element over ARIA attributes, if such an element exists. Native elements have built-in keyboard accessibility, roles, and states that require no additional work from developers.
- When we can't describe a feature to assistive technologies using the correct semantic HTML, we add ARIA attributes to its elements.

## Performance & Response Times

A user's perceived response times to actions must be quick, ideally instantaneous. We can achieve this with:

- **No animations** when displaying or editing content - Our goal is to help the user accomplish a task as efficiently as possible, any delay is time away from other tasks.
- **Efficient rendering** of React components

## Design Philosophy

### Great Design Doesn't Maximize Beauty

In most scenarios, maximizing the initial reaction to whether an interface is "beautiful" can often decrease the usability of an interface. People often find space and minimal structure to be visually pleasing, but these can often hinder ability to scan the content on screen. Remember, users are using Ashby to be efficient and productive.

### Interactive Content Must Be Easily Recognizable

Our users have different comfort and familiarity levels with technology and this affects their interpretation of interfaces. For instance, in a past experience, Mayo clinic nurses could not recognize a text input when it was presented with a single underline (as opposed to a box). When they tried to login they didn't know how to enter their username and password.

We make our content easily recognizable by making sure:

- Standard input types, like text and checkbox, look similar to their defaults in popular browsers
- Interactive content contains a primary color
- Icon sans text is only used when absolutely necessary

_There are exceptions to these guidelines that will be outlined in a separate document._

### Make It Easy for Users to Scan Information

When presenting the user with lots of information or many "results" (e.g. potential interview schedules), make it easy for them to find the information they're looking for:

- Use contrast between background and foreground content
- Alternate the background color of each row in tables
- Visually align rows and/or columns and the content within them
- Use grid lines to outline when related content starts and ends
- Strike a balance between visually pleasing spacing and fitting content on screen
- Provide an interpretation or summary in a scannable format using icons and colors

_Presenting information in Ashby will be outlined in a separate document._

### Clearly Articulate and Prioritize What Needs User Attention

One of our frustrations with current productivity software is that it puts the onus on the user to find what needs attention. The user must sift through pages of information and notifications on a daily basis to find their action item; sometimes to such an extreme that they fall back to spreadsheets or sticky notes.

Ashby models an organization's workflow and uses that information to surface what needs attention:

- We communicate importance and immediacy through iconography and color
- Each workflow has a central place to view status and launch actions

### Articulate Why a User Can't Perform a Specific Action

Another frustration we have with current productivity software is that when a user isn't allowed to perform an action, the action is often completely removed from the interface. When permissions are incorrectly assigned, this can create the perception that the software can't perform the action rather than permissions need to be adjusted.

Ashby always shows actions that can't be performed or values that can't be used with their related controls in a disabled state. The exception to this rule is when privacy requires that we can't show the action or value.

### Interfaces Used Frequently Prioritize Power Over Ease of Learning

An interface that is easy to learn can result in an interface that hides powerful features. As users become more proficient, the value of easy to learn goes to zero, the value of power increases, and the number of clicks it takes to access powerful features matters. When a feature is used frequently, prioritizing ease of learning sacrifices day-to-day value for short term value.

When confronted with this tradeoff, we prioritize day-to-day value and sacrifice ease of learning for putting power front and center in our interfaces. We supplement the challenge of learning interfaces that make this tradeoff with:

- Training
- Fantastic documentation
- Judicious use of tooltips and info boxes

A consequence of prioritizing power over ease of learning is that first impressions of our interface may be less enthusiastic because it's not easily digestible nor obvious at first glance.

## Prioritization & Process

We want Ashby to have great design: every part of the app is easy to use, with great micro-interactions, and a visual design that is beautiful and on brand (the opposite of Salesforce and other enterprise apps). However, the amount of product that needs design will exceed the output of design:

- Ashby is building several companies worth of features in one product (Greenhouse, Looker, Goodtime, Gem, and more) with a small team
- At most companies, the output of engineering exceeds the output of design. We don't expect that to be any different at Ashby

So, we focus our design talent where it has the greatest impact on customers and accept that this will introduce design we're not happy with (e.g. doesn't follow our rules and guidelines). Eventually, through hiring, investment in our design system, and incremental changes we will improve and reduce the amount of not-so-great design we deliver to customers.

To accomplish this, we need to be disciplined about prioritization and process and do the following:

### Design Prioritization Rules

1. **We prioritize great design for frequently used features over less used ones**

   - If a customer uses feature X every day and feature Y every month, saving them a minute per use is more impactful for feature X

2. **We prioritize great design for casual (but frequent) users over power users**

   - A power user will often take the time to learn the system, even if the UX isn't great or easily understandable

3. **Anyone can release new features or changes without design review**

   - In our past employment experiences, design decisions were centralized within design roles. When the output of the engineering organization was greater than the design organization, releases were often delayed or blocked. We want to avoid that
   - We trust that everyone in Ashby cares about design and can release usable (not necessarily beautiful) features aided by our design system. If they run into a situation where they need help, we trust they'll pull in someone more design minded

4. **Ideas to improve a released design don't always warrant immediate discussion**
   - If we encounter a situation where a released design could be improved (but is adequate), don't start a discussion and, instead, add it to UI/UX suggestions for triage. Discussions are time consuming and, in order to focus design talent on greatest impact, we should be selective about what we discuss and when we do it

### Design System Development

**We improve our design system only through feature development**

Our feature development is prioritized by business impact and planned across departments and, by restricting improvement of our design system through feature development, there's much less risk that the improvement has no impact.

This means we budget time for design system improvements in feature development, and, when design engineers encounter patterns that need to be implemented or improved, they take the time to convert them to reusable React components; we encourage everyone else to do the same but it's not expected.

Balancing delivering a feature with implementing design patterns can be challenging when faced with customer or business urgency, so it's important to note that **it's more important to build the reusable React component than to optimize its micro-interactions and usability**. By making it a reusable React component, we've given ourselves an easy way to improve it globally.

### Iteration Philosophy

**Nothing's permanent, everything can and will be improved over time.**

We have vocal customers, great tools to observe our users (e.g. FullStory), and can make changes much faster than most companies. Don't agonize over making the best design in version 1, we'll learn and adapt quickly.
